// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package config

import (
	"github.com/jinzhu/gorm"
	"kpdigisign/activation"
	"kpdigisign/download_document"
	"kpdigisign/registration"
	"kpdigisign/send_document"
	"kpdigisign/sign_document"
	"kpdigisign/user"
)

// Injectors from di.go:

func InjectUserController(db *gorm.DB) user.Controller {
	repository := user.NewUserRepository(db)
	mapper := user.NewUserMapper()
	service := user.NewUserService(repository, mapper)
	controller := user.NewUserController(service)
	return controller
}

func InjectRegistrationController(db *gorm.DB) registration.Controller {
	repository := registration.NewRegistrationRepository(db)
	mapper := registration.NewRegistrationMapper()
	service := registration.NewRegistrationService(repository, mapper)
	controller := registration.NewRegistrationController(service)
	return controller
}

func InjectSendDocumentController(db *gorm.DB) send_document.Controller {
	repository := send_document.NewSendDocumentRepository(db)
	mapper := send_document.NewSendDocumentMapper()
	service := send_document.NewSendDocumentService(repository, mapper)
	controller := send_document.NewSendDocumentController(service)
	return controller
}

func InjectDownloadDocumentController() download_document.Controller {
	controller := download_document.NewDownloadDocumentController()
	return controller
}

func InjectActivationController(db *gorm.DB) activation.Controller {
	repository := activation.NewActivationRepository(db)
	mapper := activation.NewActivationMapper()
	service := activation.NewActivationService(repository, mapper)
	controller := activation.NewActivationController(service)
	return controller
}

func InjectSignDocumentController(db *gorm.DB) sign_document.Controller {
	repository := sign_document.NewSignDocumentRepository(db)
	mapper := sign_document.NewSignDocumentMapper()
	service := sign_document.NewSignDocumentService(repository, mapper)
	controller := sign_document.NewSignDocumentController(service)
	return controller
}
